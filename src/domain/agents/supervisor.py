from langchain_openai import ChatOpenAI
from langgraph.prebuilt import create_react_agent
from src.domain.agents.graph_writer import graph_agent
from src.domain.agents.topic_model import tm_agent
from src.domain.agents.coder import coder_agent
from dotenv import load_dotenv
from pydantic import SecretStr
import os
from langchain.tools import Tool

load_dotenv()

api_key_str = os.getenv("OPENAI_API_KEY")
if not api_key_str:
    raise ValueError("Missing OpenAI API Key. Set OPENAI_API_KEY in your environment.")

openai_api_key = SecretStr(api_key_str)

model = ChatOpenAI(api_key=openai_api_key)

# Logging agent use and results
def wrap_agent(agent, name):
    def _run(*args, **kwargs):
        print(f"[Supervisor] Invoking agent: {name}", flush=True)
        result = agent.run(*args, **kwargs)
        print(f"[{name}] Result: {result}", flush=True)
        return result
    return Tool.from_function(name=name, func=_run, description=f"{name} agent")

graph_tool = wrap_agent(graph_agent, "graph_agent")
tm_tool = wrap_agent(tm_agent, "tm_agent")
coder_tool = wrap_agent(coder_agent, "coder_agent")

# Defines the tools/agents to be used by the supervisor agent
tools = [graph_tool, tm_tool, coder_tool]

# Create the supervisor agent using a React-based approach
supervisor = create_react_agent(model, tools)

def run_supervisor(query: str) -> dict:
    """
    Executes the supervisor agent with the given user query.

    Args:
        query (str): The input prompt to process.

    Returns:
        dict: The structured response generated by the supervisor agent.
    """
    try:
        print("Running supervisor agent...", flush=True)
        config = {"recursion_limit": 10} # Example configuration and testing
        response = supervisor.invoke({"input": query}, config)
        print("Supervisor response:", response, flush=True)
        return response
    except Exception as e:
        error_message = f"Error during supervisor execution: {e}"
        print(error_message, flush=True)
        return {"error": error_message}
